Level 100
1. Time Announcer: Write a script that displays a personalized greeting along with the current time
every minute. For example, "Good morning, Alice! It's Wednesday, 27 March 2024 11:15 AM." (Use
date and a loop to update every minute).

#####
#!/bin/bash
echo "Please enter your name"
read name
while true; do
        timest=$(date "+%A, %d %B %Y %I:%M %p")
        echo "Good morning, $name! it's $timest."
        sleep 60
done
######



2. System Uptime Monitor: Write a script that displays the system uptime and refreshes it every 5
seconds. Use the uptime command and a loop to achieve real-time updating.

#####
#!/bin/bash

while true;do
        echo $(uptime)
        sleep 5
done
#####


3. Interactive File Size Check: Write a script that prompts the user for a file path and displays the file
size in real-time as the user types (using backspace for corrections). Employ the read command and
the du -s command to check size.

#########
#!/bin/bash

# Function to get file size
get_file_size() {
    if [ -e "$1" ]; then
        du -sh "$1" | awk '{print $1}'
    else
        echo "File does not exist"
    fi
}

# Prompt the user for a file path and handle real-time input
echo -n "Enter the file path: "
stty -echo -icanon time 0 min 1
file_path=""
while true; do
    char=$(dd bs=1 count=1 2>/dev/null)
    if [ -z "$char" ]; then
        continue
    fi
    if [ "$char" = $'\177' ]; then # Handle backspace
        if [ ${#file_path} -gt 0 ]; then
            file_path="${file_path:0:${#file_path}-1}"
            echo -ne "\b \b"
        fi
    elif [ "$char" = $'\n' ]; then
        break
    else
        file_path+="$char"
        echo -n "$char"
    fi
    clear
    echo -n "Enter the file path: $file_path"
    echo
    echo "File size: $(get_file_size "$file_path")"
done
stty sane
echo
echo "Final file path: $file_path"
echo "Final file size: $(get_file_size "$file_path")"
#######



4. Countdown with User Input: Write a script that asks the user for a duration in seconds and
displays a countdown timer that updates every second until it reaches zero. Combine a loop with the
sleep command for real-time updates.

#######
#!/bin/bash
function timerr {
    echo "enter time in seconds"
    read time
    while [[ $time -gt 0 ]]; do
            echo -ne "\r$time seconds left"
            time=$((time-1))
            sleep 1
    done
    echo -e "\rTime's up!             "
}

#timerr | tail -n 1
timerr
#######


5. Interactive Currency Converter: Write a script that prompts the user for an amount in their local
currency and displays the equivalent value in another currency. Use a loop for continuous input and
consider APIs for real-time conversion rates (may require additional research).
Running the Script:
===================
Save the script as currency_converter.sh.
Make it executable with chmod +x currency_converter.sh.
Run the script with ./currency_converter.sh.
======================
#######
#check for dependencies: 
sudo apt-get install jq bc

#!/bin/bash

# Replace with your API key
API_KEY="0f4a16f8333c88a909bcf23a"
BASE_URL="https://v6.exchangerate-api.com/v6/$API_KEY/pair"

# Function to convert currency
convert_currency() {
    local from_currency=$1
    local to_currency=$2
    local amount=$3

    # Fetch the conversion rate using curl
    response=$(curl -s "$BASE_URL/$from_currency/$to_currency")

    # Extract the conversion rate from the response
    rate=$(echo $response | jq -r '.conversion_rate')

    # Calculate the converted amount
    converted_amount=$(echo "$amount * $rate" | bc -l)

    # Display the result
    echo "$amount $from_currency is equivalent to $converted_amount $to_currency"
}

# Main loop for continuous input
while true; do
    # Prompt user for input
    echo "Enter the amount you want to convert:"
    read amount

    echo "Enter the currency code you are converting from (e.g., USD):"
    read from_currency

    echo "Enter the currency code you are converting to (e.g., EUR):"
    read to_currency

    # Call the conversion function
    convert_currency $from_currency $to_currency $amount

    # Ask if the user wants to perform another conversion
    echo "Do you want to perform another conversion? (yes/no)"
    read answer

    if [ "$answer" != "yes" ]; then
        break
    fi
done

echo "Thank you for using the currency converter!"

#######

6. Simple File Change Monitor: Write a script that monitors a specific file for changes. If the file
modification time changes, the script displays a message indicating the file has been modified. Use
the stat command for comparisons.

#######
#!/bin/bash

# Prompt the user to enter the file path to monitor
read -p "Enter the full path of the file to monitor: " FILE_TO_MONITOR

# Check if the file exists
if [ ! -f "$FILE_TO_MONITOR" ]; then
    echo "Error: File not found!"
    exit 1
fi

# Function to get the last modification time of the file
get_modification_time() {
    stat -c %Y "$FILE_TO_MONITOR"
}

# Initial modification time
last_mod_time=$(get_modification_time)

echo "Monitoring changes to: $FILE_TO_MONITOR"

# Loop to continuously monitor the file
while true; do
    # Get the current modification time
    current_mod_time=$(get_modification_time)

    # Check if the modification time has changed
    if [ "$current_mod_time" != "$last_mod_time" ]; then
        echo "The file $FILE_TO_MONITOR has been modified."
        last_mod_time=$current_mod_time
    fi

    # Sleep for a short period before checking again
    sleep 2
done
#######


7. Real-Time Fortune Teller (Simple): Write a script that displays a random fortune message. Use a
loop and pre-defined fortunes stored in an array for real-time display.

#######
#!/bin/bash

# Array of predefined fortune messages
fortunes=(
    "You will have a great day today!"
    "A surprise gift is headed your way."
    "Your hard work will soon pay off."
    "An exciting opportunity is waiting for you."
    "You will meet someone who will change your life."
    "Success is just around the corner."
    "You will overcome your challenges with ease."
    "Happiness is in your near future."
    "You will find clarity in a difficult situation."
    "A new adventure awaits you!"
)

# Function to display a random fortune
display_fortune() {
    # Get a random index within the range of the array
    random_index=$((RANDOM % ${#fortunes[@]}))

    # Display the random fortune
    echo "ðŸ”® ${fortunes[$random_index]}"
}

# Loop to continuously display fortunes
while true; do
    display_fortune

    # Ask if the user wants another fortune
    echo "Would you like another fortune? (yes/no)"
    read answer

    if [ "$answer" != "yes" ]; then
        echo "Thank you for visiting the fortune teller!"
        break
    fi
done

#######


8. Simple System Info Display: Write a script that displays essential system information like the
current user, hostname, and operating system version in real-time. Update the script to display this
information periodically (e.g., every minute). (Use commands like whoami , hostname , and uname -r
to retrieve the information).

#######
#!/bin/bash
dis() {
    echo "Current user is $(whoami)"          # Prints the current logged-in username
    echo "Hostname is $(hostname)"            # Prints the system's hostname
    echo "Kernel version is $(uname -r)"      # Prints the kernel version
}
while true; do
        dis
        sleep 60
done
#######


9. Free Disk Space Monitor: Write a script that checks the free disk space on a specific partition
(e.g., / ) and displays the available space in megabytes (MB) or gigabytes (GB). Update the
information periodically (e.g., every minute) using a loop.

#######
#!/bin/bash
read -p "Enter the partition you want to monitor: " target_disk

disk() {
        df -h| grep "$target_disk"| awk '{print $4}'
}
while true; do
        disk
        sleep 60
done
#######


10. Simple File Watcher: Write a script that monitors a specific file for changes (modifications). Use a
loop to check the file's last modified time and display a message if it has been updated since the
script started.

#######
#!/bin/bash
read -p "Enter the path/to/file or filename you want to monitor : " filename


if [ ! -f "$filename" ]; then
        echo "file not found"
        exit 1

fi



mod_time() {
        stat -c "%Y" "$filename"
}

last_mod_time=$(mod_time)
echo "monitoring $filename"

while true; do
        current_mod_time=$(mod_time)
        if [ "$current_mod_time" != $last_mod_time ]; then
                echo "file modified"
                last_mod_time="$current_mod_time"
        fi
        sleep 3
done
#######


11.Network Health Monitoring Tool
Objective: Create a script that checks the network health of your server. It should ping a set of
predefined IPs or domain names and report any failures along with the timestamp. The script should
log this information and send an alert (e.g., via email) if any of the pings fail.

#######

#######


12.Log File Analyzer
Develop a script that analyzes a specified log file (e.g., Apache or Nginx access log) and extracts
information such as the most frequent IP addresses and request URLs. The script should also identify
any error codes (like 404 or 500) and count their occurrences.

#######
#!/bin/bash

# Prompt user for the path to the log file
read -p "Enter the path to the log file: " log_file

# Check if the file exists
if [ ! -f "$log_file" ]; then
    echo "File not found."
    exit 1
fi

# Function to extract the most frequent IP addresses
function most_frequent_ips() {
    echo "Most frequent IP addresses:"
    awk '{print $1}' "$log_file" | sort | uniq -c | sort -nr | head -n 10
}

# Function to extract the most frequent request URLs
function most_frequent_urls() {
    echo "Most frequent request URLs:"
    awk '{print $7}' "$log_file" | sort | uniq -c | sort -nr | head -n 10
}

# Function to count occurrences of specific error codes
function error_codes_count() {
    echo "Error codes count:"
    awk '{print $9}' "$log_file" | grep -E '^[45][0-9]{2}$' | sort | uniq -c | sort -nr
}

# Execute the functions
most_frequent_ips
echo
most_frequent_urls
echo
error_codes_count


==========================
Notes:
Adjust the field numbers in awk (e.g., $1, $7, $9) if your log format is different.
The script assumes a common log format; you might need to adapt it based on your specific log format.
==========================
#######


13.User Account and Permission Audit Script
Objective: Create a script that audits user accounts and file permissions in a system. The script
should list all users, their last login time, and check for any files in sensitive directories (like /etc or
/var) with permissions that are too permissive (e.g., world-writable files).

#######

#######

